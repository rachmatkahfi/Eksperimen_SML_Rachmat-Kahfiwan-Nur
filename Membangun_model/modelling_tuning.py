# -*- coding: utf-8 -*-
"""Modelling_tuning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eStWXFUeiZTL7N4qFZbWFSZ49iSu7v5B
"""

# modelling_tuning.py
import pandas as pd
import mlflow
import xgboost as xgb
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# =========================
# 1. Load Dataset
# =========================
df = pd.read_csv("C:/Users/ASUS/OneDrive/Documents/GitHub/Membangun_model/data_balita_preprocessing.csv")
# Target diasumsikan 'Status Gizi'
X = df.drop("Status Gizi", axis=1)
y = df["Status Gizi"]

# Split data
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# =========================
# 2. Hyperparameter Tuning
# =========================
param_grid = {
    "max_depth": [3, 5],
    "learning_rate": [0.01, 0.1],
    "n_estimators": [100, 200],
}

grid = GridSearchCV(
    xgb.XGBClassifier(use_label_encoder=False, eval_metric="mlogloss", random_state=42),
    param_grid,
    cv=3,
    scoring="accuracy",
    verbose=1,
    n_jobs=-1
)

# =========================
# 3. Manual Logging MLflow
# =========================
with mlflow.start_run():
    grid.fit(X_train, y_train)

    # Ambil model & parameter terbaik
    best_params = grid.best_params_
    best_model = grid.best_estimator_

    # Prediksi & evaluasi
    preds = best_model.predict(X_test)
    acc = accuracy_score(y_test, preds)
    cm = confusion_matrix(y_test, preds)

    # Logging params & metrics
    mlflow.log_params(best_params)
    mlflow.log_metric("accuracy", acc)

    # Simpan model
    mlflow.xgboost.log_model(best_model, "model")

    # Print hasil
    print("âœ… Best Params:", best_params)
    print(f"âœ… Accuracy: {acc:.4f}")
    print("\nðŸ“Š Confusion Matrix:\n", cm)
    print("\nðŸ“‘ Classification Report:\n", classification_report(y_test, preds))